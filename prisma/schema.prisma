generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model achievements {
  id                Int                 @id @default(autoincrement())
  title             String              @db.VarChar(100)
  description       String?             @db.Text
  conditions        String?             @db.VarChar(255)
  created_at        DateTime?           @default(now()) @db.Timestamp(0)
  updated_at        DateTime?           @default(now()) @db.Timestamp(0)
  user_achievements user_achievements[]
}

model user_completed_lessons {
  id          Int      @id @default(autoincrement())
  user_id     Int
  lesson_id   Int
  completed_at DateTime @default(now())

  users  users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lessons lessons @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@unique([user_id, lesson_id], map: "user_lesson_unique")
  @@index([user_id])
  @@index([lesson_id])
}


model exercises {
  id          Int       @id @default(autoincrement())
  slug        String?   @unique(map: "slug") @db.VarChar(255)
  title       String    @db.VarChar(255)
  description String?   @db.Text
  links       Json?
  sort_order  Int?      @default(0)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
}

model languages {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(100)
  code       String    @unique(map: "code") @db.VarChar(10)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  units      units[]
}

model leaderboards {
  id         Int       @id @default(autoincrement())
  user_id    Int
  week_year  String    @db.VarChar(10)
  xp         Int?      @default(0)
  rank       Int?
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "leaderboards_ibfk_1")

  @@unique([user_id, week_year], map: "user_id")
}

model lessons {
  id          Int       @id @default(autoincrement())
  unit_id     Int
  name        String?   @db.VarChar(255)
  external_id String?   @db.VarChar(255)
  sort_order  Int
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  units       units     @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lessons_ibfk_1")
  user_completed_lessons user_completed_lessons[] // âœ… back relation
  @@unique([unit_id, external_id], map: "unique_lesson")
}

model onboarding_options {
  id                   Int                  @id @default(autoincrement())
  question_id          Int
  name                 String               @db.VarChar(100)
  flag                 String?              @db.VarChar(10)
  color                String?              @db.VarChar(20)
  onboarding_questions onboarding_questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "onboarding_options_ibfk_1")

  @@index([question_id], map: "question_id")
}

model onboarding_questions {
  id                 Int                  @id @default(autoincrement())
  q_key              String               @unique(map: "q_key") @db.VarChar(50)
  question           String               @db.Text
  created_at         DateTime?            @default(now()) @db.Timestamp(0)
  updated_at         DateTime?            @default(now()) @db.Timestamp(0)
  onboarding_options onboarding_options[]
}

model units {
  id          Int       @id @default(autoincrement())
  language_id Int
  name        String?   @db.VarChar(255)
  external_id String?   @db.VarChar(255)
  sort_order  Int
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  lessons     lessons[]
  languages   languages @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "units_ibfk_1")

  @@unique([language_id, external_id], map: "unique_unit")
}

model user_achievements {
  id             Int          @id @default(autoincrement())
  user_id        Int
  achievement_id Int
  unlocked_at    DateTime?    @default(now()) @db.Timestamp(0)
  created_at     DateTime?    @default(now()) @db.Timestamp(0)
  updated_at     DateTime?    @default(now()) @db.Timestamp(0)
  users          users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_achievements_ibfk_1")
  achievements   achievements @relation(fields: [achievement_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_achievements_ibfk_2")

  @@unique([user_id, achievement_id], map: "user_id")
  @@index([achievement_id], map: "achievement_id")
}

model user_progress {
  id                       Int       @id @default(autoincrement())
  user_id                  Int    @unique(map: "user_id")
  lang                     String    @db.VarChar(100)
  last_completed_lesson_id String?   @db.VarChar(100)
  updated_at               DateTime? @default(now()) @db.Timestamp(0)
}

model user_stats {
  id                Int       @id @default(autoincrement())
  user_id           Int       @unique(map: "user_id")
  xp                Int?      @default(0)
  streak            Int?      @default(0)
  gems              Int?      @default(0)
  hearts            Int?      @default(5)
  last_heart_update DateTime? @default(now()) @db.Timestamp(0)
  last_streak_date  DateTime? @default(now()) @db.Timestamp(0)
  created_at        DateTime? @default(now()) @db.Timestamp(0)
  updated_at        DateTime? @default(now()) @db.Timestamp(0)
  users             users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_stats_ibfk_1")
}

model users {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(100)
  uid                  String?                @db.VarChar(255)
  email                String?                @unique(map: "email") @db.VarChar(150)
  phone                String?                @unique(map: "phone") @db.VarChar(20)
  password             String                 @db.VarChar(255)
  login_type           users_login_type?      @default(EMAIL)
  refer_code           String?                @unique(map: "refer_code") @db.VarChar(50)
  referred_by          String?                @db.VarChar(50)
  profile              String?                @db.Text
  fcm_token            String?                @db.Text
  token                String?                @db.Text
  otp                  String?                @db.VarChar(10)
  role                 users_role?            @default(LEARNER)
  created_at           DateTime?              @default(now()) @db.Timestamp(0)
  updated_at           DateTime?              @default(now()) @db.Timestamp(0)
  leaderboards         leaderboards[]
  onboarding_responses onboarding_responses[]
  user_achievements    user_achievements[]
  user_stats           user_stats?
  daily_practices      daily_practice[]
  user_completed_lessons user_completed_lessons[]
  followers follows[] @relation("followers") // people who follow THIS user
  following follows[] @relation("following") // people THIS user follows

}

model follows {
  id            Int      @id @default(autoincrement())
  follower_id   Int
  following_id  Int
  created_at    DateTime @default(now())

  // relations
  follower  users @relation("following", fields: [follower_id], references: [id], onDelete: Cascade)
  following users @relation("followers", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id], map: "uniq_follower_following")
  @@index([follower_id], map: "idx_follows_follower")
  @@index([following_id], map: "idx_follows_following")
}


model onboarding_answers {
  id                   Int                  @id @default(autoincrement())
  response_id          Int
  question_key         String               @db.VarChar(100)
  answer_value         String?              @db.Text
  created_at           DateTime?            @default(now()) @db.Timestamp(0)
  updated_at           DateTime?            @default(now()) @db.Timestamp(0)
  onboarding_responses onboarding_responses @relation(fields: [response_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "onboarding_answers_ibfk_1")

  @@index([response_id], map: "response_id")
}

model onboarding_responses {
  id                 Int                  @id @default(autoincrement())
  user_id            Int
  build_no           String?              @db.VarChar(50)
  build_signature    String?              @db.VarChar(255)
  version            String?              @db.VarChar(50)
  completed_at       DateTime             @db.DateTime(0)
  created_at         DateTime?            @default(now()) @db.Timestamp(0)
  updated_at         DateTime?            @default(now()) @db.Timestamp(0)
  onboarding_answers onboarding_answers[]
  users              users                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "onboarding_responses_ibfk_1")

  @@index([user_id], map: "user_id")
}

model questions {
  id          Int       @id @default(autoincrement())
  language_id Int
  map_key     String    @db.VarChar(255)
  title       String    @db.VarChar(255)
  question    String    @db.Text
  option_a    String    @db.VarChar(255)
  option_b    String    @db.VarChar(255)
  option_c    String    @db.VarChar(255)
  option_d    String    @db.VarChar(255)
  answer      String    @db.VarChar(255)
  task1       String?   @db.Text
  task2       String?   @db.Text
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)

  practice_items practice_item[] // âœ… back relation
  @@index([map_key], map: "idx_questions_mapkey")
}

model game_settings {
  id          Int       @id @default(autoincrement())
  key         String    @unique(map: "key") @db.VarChar(100)
  value       String    @db.VarChar(255)
  description String?   @db.Text
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
}

model daily_practice {
  id           Int       @id @default(autoincrement())
  user_id      Int
  date         DateTime
  status       String    @db.VarChar(20) // "assigned", "completed"
  created_at   DateTime? @default(now())
  completed_at DateTime?
  earned_xp    Int?      @default(0)   // ðŸ‘ˆ add this
  earned_gems  Int?      @default(0)   // ðŸ‘ˆ add this

  items        practice_item[]

  users users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@unique([user_id, date]) // only one per day
}

model practice_item {
  id              Int       @id @default(autoincrement())
  practice_id     Int
  question_id     Int
  question_status String    @db.VarChar(20) // "pending", "answered", "skipped"
  user_answer     String?   @db.Text
  is_correct      Boolean?
  created_at      DateTime? @default(now())

  daily_practice daily_practice @relation(fields: [practice_id], references: [id], onDelete: Cascade)
  question       questions      @relation(fields: [question_id], references: [id], onDelete: Cascade)
  
}

enum users_login_type {
  EMAIL
  PHONE
  GOOGLE
  FACEBOOK
  APPLE
}

enum users_role {
  CLIENT
  PROFESSIONAL
  ADMIN
  LEARNER
}
